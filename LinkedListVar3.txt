#include <iostream>
using namespace std;
struct node {
    int number;
    node* next;
    bool flag_to_delete = false;
};
typedef node** top;
node* InsertEnd(top head) {
    node* ptr = *head;
    while (ptr->next) ptr = ptr->next;
    return ptr;
}
void Push(top head, int num) {
    node* ptr = new node();
    ptr->number = num;
    ptr->next = NULL;
    if (*head == NULL) {
        *head = ptr;
    }
    else {
        InsertEnd(head)->next = ptr;
    }
}
void ShowList(top head) {
    if (*head) {
        node* ptr = *head;
        while (ptr) {
            cout << ptr->number << endl;
            ptr = ptr->next;
        }
        cout << endl;
    }
    else cout << "List is empty" << endl;
}
void Countlist(top head) {
    node* ptr = *head;
    int counter = 0;
    while (ptr) {
        counter++;
        ptr = ptr->next;
    }
    cout << "Size of the list - " << counter << endl;
}
void FindMax(top head) {
    if (*head) {
        node* ptr = *head;
        node* maxptr = *head;
        while (ptr)
        {
            if (maxptr->number <= ptr->number) {
                maxptr = ptr;
            }
            ptr = ptr->next;
        }
        cout << "Max is - " << maxptr->number << endl;
    }
}
void FindMin(top head) {
    if (*head) {
        node* ptr = *head;
        node* minptr = *head;
        while (ptr)
        {
            if (minptr->number >= ptr->number) {
                minptr = ptr;
            }
            ptr = ptr->next;
        }
        cout << "Min is - " << minptr->number << endl;
    }
}
void DeleteList(top head) {
    node* ptr;
    while (*head) {
        ptr = *head;
        *head = ptr->next;
        delete[] ptr;
    }
}
//void ShowBool(top head) {
//    node* ptr = *head;
//    while (ptr)
//    {
//        cout << ptr->flag_to_delete << endl;
//        ptr = ptr->next;
//    }
//}
bool ChooseDoubled(top head, top newhead) {
    node* firstptr = *head;
    node* checkptr;
    bool no_copies = false;
    while (firstptr)
    {
        checkptr = firstptr->next;
        while (checkptr)
        {
            if (firstptr->number == checkptr->number) {
                no_copies = true;
                firstptr->flag_to_delete = true;
                checkptr->flag_to_delete = true;
           }
            checkptr = checkptr->next;
        }
        firstptr = firstptr->next;
    }
    if (no_copies) {
        firstptr = *head;
        while (firstptr)
        {
            if (!firstptr->flag_to_delete) Push(newhead, firstptr->number);
            firstptr = firstptr->next;
        }
        DeleteList(head);
        return true;
    }
    else return false;
}
int main() {
    setlocale(0, "rus");
    srand(time(NULL));
    node* List = NULL;
    node* ListNew = NULL;
    int a;
    for (int i = 0; i < 10; i++)
    {
        a = rand() % 10;
        Push(&List, a);
    }
    ShowList(&List);
    Countlist(&List);
    FindMax(&List);
    FindMin(&List);
    cout << endl;
    if (ChooseDoubled(&List, &ListNew)) {
        ShowList(&ListNew);
    }
    else {
        ShowList(&List);
    }
}