#include <iostream>
#include <string>
using namespace std;
struct box {
    string word;
    int num;
    box* left_child;
    box* right_child;
};
box* Inicialization(int x) {
    box* ptr = new box();
    ptr->num = x;
    ptr->left_child = NULL;
    ptr->right_child = NULL;
    return ptr;
}
box* PushElement(box* root, int x) {
    if (root == NULL) return Inicialization(x);
    else if (x > root->num) root->right_child = PushElement(root->right_child, x);
    else root->left_child = PushElement(root->left_child, x);
    return root;
}
box* find(box* root, int x) {
    if (root == NULL || x == root->num) return root;
    else if (x > root->num) return find(root->right_child, x);
    else return find(root->left_child, x);
    return root;
}
box* find_min(box* root) {
    if (root == NULL) return NULL;
    else if (root->left_child != NULL) return find_min(root->left_child);
    return root;
}
int counter = 0;
void show_tree(box* root) {
    if (root != NULL)
    {
 
        show_tree(root->left_child);
        cout << root->num << " ";

        show_tree(root->right_child);
        if (root->left_child == NULL && root->right_child == NULL) counter++;
    }
}
box* DeleteElement(box* root, int num) {
    if (root == NULL) return NULL;
     if (num > root->num) root->right_child = DeleteElement(root->right_child, num);
    else if(num < root->num) root->left_child = DeleteElement(root->left_child, num);
    else
     {
         if (root->left_child == NULL && root->right_child == NULL)
         {
             free(root);
             return NULL;
         }
         else if (root->left_child == NULL || root->right_child == NULL) {
             box* ptr;
             if (root->left_child == NULL) {
                 ptr = root->right_child;
                 free(root);
                 return ptr;
             }
             else
             {
                 ptr = root->left_child;
                 free(root);
                 return ptr;
             }
         }
         else
         {
             box* ptrmin = find_min(root->right_child);
             root->num = ptrmin->num;
             root->right_child = DeleteElement(root->right_child, ptrmin->num);
         }
     }
     return root;
}
int main()
{

    box* root = Inicialization(strlen("Hello"));
    PushElement(root, strlen("HEL"));
    PushElement(root, strlen("HELLO00"));
    PushElement(root, strlen("HELLO0"));
    PushElement(root, strlen("ffffffff"));
    show_tree(root); cout << endl;
    cout << counter << " - leaves " << endl;
    return 0;
}