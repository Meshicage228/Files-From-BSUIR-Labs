#include <iostream>
using namespace std;
struct box {
    int data;
    box* next;
};
struct controle {
    int count;
    box* front;
    box* rear;
};
void inici(controle* q) {
    q->count = 0;
    q->front = NULL;
    q->rear = NULL;
}
int empty(controle* q) {
    return (q->count == NULL);
}
void addqueue(controle* q, int num) {
        box* ptr = new box();
        ptr->data = num;
        ptr->next = NULL;
        if (!empty(q)) {
            q->rear->next = ptr;
            q->rear = ptr;
        }
        else {
            q->front = q->rear = ptr;
        }
        q->count++;
}
void show(box* q) {
    if (q == NULL) {
        cout << "Конец очереди..\n";
    }
    else {
        cout << q->data << endl;
        show(q = q->next);
    }
}
int count_even_num(controle* que) {
    box* ptr = que->front;
    int counter = 0;
    while (ptr) {
        if (ptr->data % 2 == 0) counter++;
        ptr = ptr->next;
    }
    return counter;
}
void createqueues(controle* head, controle* otriz, controle* pol) {
    box* ptr = head->front;
    while (ptr)
    {
        if (ptr->data < 0) {
            addqueue(otriz, ptr->data);
        }
        else
        {
            addqueue(pol, ptr->data);
        }
        ptr = ptr->next;
    }
}
int main()
{
    setlocale(0, "rus");
    srand(time(NULL));
    controle* que = new controle();
    controle* quepol = new controle();
    controle* queotriz = new controle();
    inici(que);
    inici(quepol);
    inici(queotriz);
    int num;
    cout << "Кол-во элементов очереди : ";
    cin >> num;
    for (int i = 0; i < num; i++) {
        int chisl = rand() % 100 - 30;
        addqueue(que, chisl);
    }
    cout << "Сгенерированная очередь : \n";
    show(que->front);
    cout << "Кол-во четных элементов : " << count_even_num(que) << endl;
    cout << endl;
    createqueues(que, queotriz, quepol);
    cout << "Положительная очередь : \n"; show(quepol->front); cout << endl;
    cout << "Отрицательная очередь : \n"; show(queotriz->front);
    return 0;
}