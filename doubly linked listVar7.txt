#include <iostream>
using namespace std;
struct box
{
    int num;
    box* next;
    box* prev;
};
struct control
{
    int count;
    int size;
    box* head;
    box* tail;
};
int Empty(control* ptr) {
    return (ptr->tail == NULL && ptr->head == NULL);
}
void inicialisation(control* ptr) {
    ptr->count = 0;
    ptr->head = NULL;
    ptr->tail = NULL;
}
void AddElement(control* st, int num) {
    if (st->count <= st->size)
    {
        box* ptr = new box();
        ptr->num = num;
        ptr->next = NULL;
        ptr->prev = NULL;
        if (!Empty(st))
        {
            st->tail->next = ptr;
            ptr->prev = st->tail;
            st->tail = ptr;
        }
        else
        {
            st->head = st->tail = ptr;
        }
        st->count++;
    }
    else
    {
        cout << "You  cant add element! " << endl;
    }
}
void AddToTop(control* list) {
    box* ptr = new box();
    int num;
    cin >> num;
    ptr->num = num;
    ptr->prev = NULL;
    ptr->next = list->head;
    list->head->prev = ptr;
    list->head = ptr;
    list->count++;
}
void AddToTail(control* list) {
    box* ptr = new box();
    int num;
    cin >> num;
    ptr->num = num;
    ptr->next = NULL;
    
}
void ShowQueue(box* que) {
    if (que == NULL)
    {
        cout << "End..\n";
    }
    else
    {
        cout << que->num << endl;
        ShowQueue(que = que->next);
    }
}
void DeleteFromKey(box* st, control* cont) {
    box* last = st->prev;
    box* sled = st->next;
    if (st == cont->head)
    {
        free(st);
        cont->head = sled;
        cont->head->prev = NULL;
        cont->count--;
       
    }
    else if (st == cont->tail)
    {
        free(st);
        cont->tail = last;
        cont->tail->next = NULL;
        cont->count--;
    }
    else
    {
        free(st);
        last->next = sled;
        sled->prev = last;
        cont->count--;
    }
}
int counmax = 0;
int counmin = 0;
bool flag = true;
box* FindMin(box* que) {
    box* min = que;
    box* ptrnext = min->next;
    while (ptrnext)
    {
        if (min->num >= ptrnext->num)
        {
            min = ptrnext;
        }
        ptrnext = ptrnext->next;
    }
    ptrnext = que;
    while (ptrnext->num != min->num)
    {
        counmin++;
        ptrnext = ptrnext->next;
    }
    return min;
}
box* FindMax(box* que) {
    box* max = que;
    box* ptrnext = max->next;
    while (ptrnext)
    {
        if (max->num <= ptrnext->num)
        {
            max = ptrnext;
        }
        ptrnext = ptrnext->next;
    }
    ptrnext = que;
    while (ptrnext->num != max->num)
    {
        counmax++;
        ptrnext = ptrnext->next;
    }
    return max;
}
box* EscapeList(box* start, box* end, control* lst) {
    if (counmin < counmax) { 
        box* swap = end;
        end = start;
        start = swap;
        cout << "Start point : " << start->num << endl;
        cout << "End point : " << end->num << endl;
    }
    else {
        cout << "Start point : " << start->num << endl;
        cout << "End point : " << end->num << endl;
    }
    box* bef = start->prev;
    box* sled = end->next;
    if (start == lst->head && end == lst->tail) {
        start->prev = end;
        end->next = start;
    }
    else if (start == lst->head) {
        end->next = start;
        lst->head = sled;
        start->prev = end;
        lst->head->prev = NULL;
    }
    else if (end == lst->tail) {
        start->prev = end;
        lst->tail = bef;
        lst->tail->next = NULL;
        end->next = start;
    }
    else {
        start->prev = end;
        end->next = start;
        bef->next = sled;
        sled->prev = bef;
    }
    return start;
}
void DeleteElement(box* start, box* end, control* cont,  int num) {
    box* ptrstart = start;
    box* ptrend = end;
    while (ptrstart && ptrend)
    {
        if (ptrstart->num == num )
        {
            DeleteFromKey(ptrstart, cont);
            break;
        }
        else if (ptrend->num == num)
        {
            DeleteFromKey(ptrend, cont);
            break;
        }
        else
        {
            ptrstart = ptrstart->next;
            ptrend = ptrend->prev;
        }
    }
}
int main()
{
    control* que = new control();
    control* quecir = new control();
    inicialisation(que);
    inicialisation(quecir);
    int size;
    cin >> size;
    que->size = size;
    srand(time(NULL));
    for (int i = 0; i < size; i++)
    {
        int num = rand() % 101 - 50;
        AddElement(que, num);
    }
    cout << "List : " << endl;
    ShowQueue(que->head);
    cout << "size of this is - " << que->count << endl;
    box* ptr = EscapeList(FindMax(que->head), FindMin(que->head), que);
    cout << "After manipulation : \n";
    ShowQueue(que->head);
    cout << "Zicl : " << endl;
    ShowQueue(ptr);
    return 0;
}